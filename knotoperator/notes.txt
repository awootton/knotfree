-----  broken and switched to squarespace notes May the fourth '24:

	Final notes:  Copy acme from google DNS to squarespace over and over 
		Then it worked.


	See: https://www.youtube.com/watch?v=G4CmbYL9UPg

	# not using gcloud now.

	at squarespace.com change the nameservers to square ones

	# have: bcm2uowuipzx CNAME gv-iya46vlnm72bix.dv.googlehosted.com
	# and:  _acme-challenge.knotfree.net	text = "o2XLQDz1ovOrWgHArPQCNB0DSMDwRC4-6uqOeKJxUwM"

	nslookup -type=TXT _acme-challenge.knotfree.net
		# ok
	nslookup -type=CNAME bcm2uowuipzx.knotfree.net
		# no answer

	
	export PROJECT_ID=fair-theater-238820

	gcloud iam service-accounts keys create key.json \
	   --iam-account dns01-solver@$PROJECT_ID.iam.gserviceaccount.com

	kk delete secret                 clouddns-dns01-solver-svc-acct
	kk delete secret -n default      clouddns-dns01-solver-svc-acct
	kk delete secret -n cert-manager clouddns-dns01-solver-svc-acct	

	kubectl create secret generic clouddns-dns01-solver-svc-acct \
	   --from-file=key.json

	kubectl create secret generic -n default clouddns-dns01-solver-svc-acct \
	   --from-file=key.json

	kubectl create secret generic -n cert-manager clouddns-dns01-solver-svc-acct \
	   --from-file=key.json

	   # copy the _acme-challenge.knotfree.net. from console cloud domains  to squarespace
	   # the new one is xxx  

	nslookup -type=TXT _acme-challenge.knotfree.net #  wait for value to change?
	nslookup -debug -type=TXT _acme-challenge.knotfree.net ns-cloud-a1.googledomains.com

	dig knotfree.net @ns-cloud-a1.googledomains.com

	see: kubectl describe certificate

	dig @ns-cloud-a1.googledomains.com knotfree.net soa 
	dig @ns-cloud-a1.googledomains.com -t txt knotfree.net


-----  end broken and switched to squarespace notes:

----- older notes: 

    ## dns-01 google gcloud setup 

	# google traefik google domains kubernetes letsencrypt

	cd deploy

	export PROJECT_ID=fair-theater-238820

	gcloud iam service-accounts create dns01-solver --display-name "dns01-solver"
		
		Created service account [dns01-solver] or already created error : Service account dns01-solver already exists within project projects/fair-theater-238820.

	export PROJECT_ID=fair-theater-238820
	gcloud projects add-iam-policy-binding $PROJECT_ID \
	   --member serviceAccount:dns01-solver@$PROJECT_ID.iam.gserviceaccount.com \
	   --role roles/dns.admin

	gcloud iam service-accounts keys create key.json \
	   --iam-account dns01-solver@$PROJECT_ID.iam.gserviceaccount.com

	kubectl create secret generic clouddns-dns01-solver-svc-acct \
	   --from-file=key.json

	kubectl create secret generic -n default clouddns-dns01-solver-svc-acct \
	   --from-file=key.json

	kubectl create secret generic -n cert-manager clouddns-dns01-solver-svc-acct \
	   --from-file=key.json

	   copy the _acme-challenge.knotfree.net. from console cloud domains  to google domains

--------

also 

kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml

-------

civo k8s 

Server Version: version.Info{Major:"1", Minor:"22", GitVersion:"v1.22.11+k3s1", GitCommit:"bb0cdd929a960aade81e51911f98fdee44ebce4e", GitTreeState:"clean", BuildDate:"2022-06-27T22:14:54Z", GoVersion:"go1.16.10", Compiler:"gc", Platform:"linux/amd64"}

makig new v1 version:


// new operator version in ../knotoperatorv1
operator-sdk init --domain knotfree.net --repo github.com/awootton/knotfreeiot/knotoperatorv1

operator-sdk create api --group cache --version v1alpha1 --kind Knotoperator --resource --controller

editing... see https://sdk.operatorframework.io/docs/building-operators/golang/tutorial/

make manifests ??


--- 

old notes 
go get github.com/brancz/gojsontoyaml


xxxmkdir memcached-operator
xxxcd memcached-operator



operator-sdk generate k8s
operator-sdk generate k8s
operator-sdk generate k8s


see https://github.com/operator-framework/operator-sdk

needs prom 
https://github.com/coreos/prometheus-operator

https://banzaicloud.com/blog/operator-sdk/

add this lines to .bash_profile 
    export KUBE_EDITOR="atom --wait"
    alias kk='kubectl'

workflow:

kind create cluster --config kind-example-config.yaml #once

kubectl config use-context "kind-kind" 
kk create ns knotspace
kubectl config set-context --current --namespace=knotspace


see deploy.sh and apply-namespace.go 

#and then don't build the operator yet: 

#operator-sdk build gcr.io/fair-theater-238820/knotoperator

#docker push gcr.io/fair-theater-238820/knotoperator

#do this all the time:
operator-sdk generate k8s

kubectl apply -f deploy/service_account.yaml
kubectl apply -f deploy/role.yaml
kubectl apply -f deploy/role_binding.yaml
kubectl apply -f deploy/crds/app.knotfree.io_appservices_crd.yaml
#always goes to default: 
#kubectl apply -f  deploy/promethius_op.yaml 
kubectl apply -f deploy/crds/app.knotfree.io_v1alpha1_appservice_cr.yaml
	
#build this:
cd ..
docker build -t gcr.io/fair-theater-238820/knotfreeserver .
docker push gcr.io/fair-theater-238820/knotfreeserver 
cd knotoperator
kubectl apply -f deploy/knotfreedeploy.yaml
	

then  start the debugger with cmd/manager/main.go
find .Watch( and read that code. 

operator-sdk generate k8s and go again

#once:
kind delete cluster

#Create the namespace and CRDs, and then wait for them to be availble before creating the remaining resources
cd ~/Documents/workspace/kube-prometheus/
kubectl create -f manifests/setup
until kubectl get servicemonitors --all-namespaces ; do date; sleep 1; echo ""; done
kubectl create -f manifests/


